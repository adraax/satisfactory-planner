name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  IMAGE_NAME: satisfactory-planner

jobs:
  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy:
    needs: push

    runs-on: ubuntu-latest

    steps:
      - name: Deploy
        env:
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          CI_DOCKER_PULL: ${{ secrets.CI_DOCKER_PULL }}
        run: |
          mkdir ~/.ssh
          (echo "$SSH_KNOWN_HOSTS" | base64 -d) >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
          eval $(ssh-agent -s)
          ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
          # log into Docker registry
          ssh deployer@adraax.eu "docker login -u adraax -p $CI_DOCKER_PULL docker.pkg.github.com"
          # stop container, remove image.
          ssh deployer@adraax.eu "cd /opt/traefik; docker-compose stop satisfactory-planner" || true
          # pull latest image
          ssh deployer@adraax.eu "cd /opt/traefik; docker-compose pull satisfactory-planner" || true
          # start container
          ssh deployer@adraax.eu "cd /opt/traefik; docker-compose up -d satisfactory-planner" || true
